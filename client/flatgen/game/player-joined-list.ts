// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from '../../flatbuffers/flatbuffers.js';

import { Player } from '../../flatgen/game/player.js';


export class PlayerJoinedList {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerJoinedList {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerJoinedList(bb:flatbuffers.ByteBuffer, obj?:PlayerJoinedList):PlayerJoinedList {
  return (obj || new PlayerJoinedList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerJoinedList(bb:flatbuffers.ByteBuffer, obj?:PlayerJoinedList):PlayerJoinedList {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerJoinedList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

player(index: number, obj?:Player):Player|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Player()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playerLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPlayerJoinedList(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
}

static createPlayerVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayerVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPlayerJoinedList(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerJoinedList(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset):flatbuffers.Offset {
  PlayerJoinedList.startPlayerJoinedList(builder);
  PlayerJoinedList.addPlayer(builder, playerOffset);
  return PlayerJoinedList.endPlayerJoinedList(builder);
}
}
