// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from '../../flatbuffers/flatbuffers.js';
export class RawEvent {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRawEvent(bb, obj) {
        return (obj || new RawEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRawEvent(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RawEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    rawData(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    rawDataLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    rawDataArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startRawEvent(builder) {
        builder.startObject(1);
    }
    static addRawData(builder, rawDataOffset) {
        builder.addFieldOffset(0, rawDataOffset, 0);
    }
    static createRawDataVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startRawDataVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endRawEvent(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createRawEvent(builder, rawDataOffset) {
        RawEvent.startRawEvent(builder);
        RawEvent.addRawData(builder, rawDataOffset);
        return RawEvent.endRawEvent(builder);
    }
}
