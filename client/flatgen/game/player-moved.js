// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from '../../flatbuffers/flatbuffers.js';
import { EventKind } from '../../flatgen/game/event-kind.js';
import { Player } from '../../flatgen/game/player.js';
export class PlayerMoved {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlayerMoved(bb, obj) {
        return (obj || new PlayerMoved()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlayerMoved(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerMoved()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    kind() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : EventKind.NilEvent;
    }
    player(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Player()).__init(this.bb_pos + offset, this.bb) : null;
    }
    static startPlayerMoved(builder) {
        builder.startObject(2);
    }
    static addKind(builder, kind) {
        builder.addFieldInt8(0, kind, EventKind.NilEvent);
    }
    static addPlayer(builder, playerOffset) {
        builder.addFieldStruct(1, playerOffset, 0);
    }
    static endPlayerMoved(builder) {
        const offset = builder.endObject();
        return offset;
    }
}
