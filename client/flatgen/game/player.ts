// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from '../../flatbuffers/flatbuffers.js';

export class Player {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Player {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

id():number {
  return this.bb!.readInt32(this.bb_pos);
}

x():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

y():number {
  return this.bb!.readInt32(this.bb_pos + 8);
}

speed():number {
  return this.bb!.readInt32(this.bb_pos + 12);
}

movingLeft():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 16);
}

movingRight():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 17);
}

movingUp():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 18);
}

movingDown():boolean {
  return !!this.bb!.readInt8(this.bb_pos + 19);
}

static sizeOf():number {
  return 20;
}

static createPlayer(builder:flatbuffers.Builder, id: number, x: number, y: number, speed: number, moving_left: boolean, moving_right: boolean, moving_up: boolean, moving_down: boolean):flatbuffers.Offset {
  builder.prep(4, 20);
  builder.writeInt8(Number(Boolean(moving_down)));
  builder.writeInt8(Number(Boolean(moving_up)));
  builder.writeInt8(Number(Boolean(moving_right)));
  builder.writeInt8(Number(Boolean(moving_left)));
  builder.writeInt32(speed);
  builder.writeInt32(y);
  builder.writeInt32(x);
  builder.writeInt32(id);
  return builder.offset();
}

}
