// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from '../../flatbuffers/flatbuffers.js';
import { Player } from '../../flatgen/game/player.js';
export class PlayerMovedList {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPlayerMovedList(bb, obj) {
        return (obj || new PlayerMovedList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPlayerMovedList(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PlayerMovedList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    players(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Player()).__init(this.bb.__vector(this.bb_pos + offset) + index * 20, this.bb) : null;
    }
    playersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startPlayerMovedList(builder) {
        builder.startObject(1);
    }
    static addPlayers(builder, playersOffset) {
        builder.addFieldOffset(0, playersOffset, 0);
    }
    static startPlayersVector(builder, numElems) {
        builder.startVector(20, numElems, 4);
    }
    static endPlayerMovedList(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPlayerMovedList(builder, playersOffset) {
        PlayerMovedList.startPlayerMovedList(builder);
        PlayerMovedList.addPlayers(builder, playersOffset);
        return PlayerMovedList.endPlayerMovedList(builder);
    }
}
