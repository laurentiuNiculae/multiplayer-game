// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerJoinedList struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerJoinedList(buf []byte, offset flatbuffers.UOffsetT) *PlayerJoinedList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerJoinedList{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerJoinedListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerJoinedList(buf []byte, offset flatbuffers.UOffsetT) *PlayerJoinedList {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerJoinedList{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerJoinedListBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerJoinedList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerJoinedList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerJoinedList) Kind() EventKind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EventKind(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PlayerJoinedList) MutateKind(n EventKind) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *PlayerJoinedList) Players(obj *Player, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 20
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PlayerJoinedList) PlayersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PlayerJoinedListStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PlayerJoinedListAddKind(builder *flatbuffers.Builder, kind EventKind) {
	builder.PrependByteSlot(0, byte(kind), 0)
}
func PlayerJoinedListAddPlayers(builder *flatbuffers.Builder, players flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(players), 0)
}
func PlayerJoinedListStartPlayersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(20, numElems, 4)
}
func PlayerJoinedListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
