// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Player struct {
	_tab flatbuffers.Struct
}

func (rcv *Player) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Player) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Player) Id() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Player) MutateId(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Player) X() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Player) MutateX(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Player) Y() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Player) MutateY(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *Player) Speed() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *Player) MutateSpeed(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *Player) MovingLeft() bool {
	return rcv._tab.GetBool(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *Player) MutateMovingLeft(n bool) bool {
	return rcv._tab.MutateBool(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *Player) MovingRight() bool {
	return rcv._tab.GetBool(rcv._tab.Pos + flatbuffers.UOffsetT(17))
}
func (rcv *Player) MutateMovingRight(n bool) bool {
	return rcv._tab.MutateBool(rcv._tab.Pos+flatbuffers.UOffsetT(17), n)
}

func (rcv *Player) MovingUp() bool {
	return rcv._tab.GetBool(rcv._tab.Pos + flatbuffers.UOffsetT(18))
}
func (rcv *Player) MutateMovingUp(n bool) bool {
	return rcv._tab.MutateBool(rcv._tab.Pos+flatbuffers.UOffsetT(18), n)
}

func (rcv *Player) MovingDown() bool {
	return rcv._tab.GetBool(rcv._tab.Pos + flatbuffers.UOffsetT(19))
}
func (rcv *Player) MutateMovingDown(n bool) bool {
	return rcv._tab.MutateBool(rcv._tab.Pos+flatbuffers.UOffsetT(19), n)
}

func CreatePlayer(builder *flatbuffers.Builder, id int32, x int32, y int32, speed int32, movingLeft bool, movingRight bool, movingUp bool, movingDown bool) flatbuffers.UOffsetT {
	builder.Prep(4, 20)
	builder.PrependBool(movingDown)
	builder.PrependBool(movingUp)
	builder.PrependBool(movingRight)
	builder.PrependBool(movingLeft)
	builder.PrependInt32(speed)
	builder.PrependInt32(y)
	builder.PrependInt32(x)
	builder.PrependInt32(id)
	return builder.Offset()
}
