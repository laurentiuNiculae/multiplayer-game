// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package game

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Player struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayer(buf []byte, offset flatbuffers.UOffsetT) *Player {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Player{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayer(buf []byte, offset flatbuffers.UOffsetT) *Player {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Player{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Player) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Player) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Player) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Player) X() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateX(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Player) Y() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateY(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Player) Speed() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Player) MutateSpeed(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Player) MovingLeft() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Player) MutateMovingLeft(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *Player) MovingRight() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Player) MutateMovingRight(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *Player) MovingUp() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Player) MutateMovingUp(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *Player) MovingDown() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Player) MutateMovingDown(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func PlayerStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func PlayerAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func PlayerAddX(builder *flatbuffers.Builder, x int32) {
	builder.PrependInt32Slot(1, x, 0)
}
func PlayerAddY(builder *flatbuffers.Builder, y int32) {
	builder.PrependInt32Slot(2, y, 0)
}
func PlayerAddSpeed(builder *flatbuffers.Builder, speed int32) {
	builder.PrependInt32Slot(3, speed, 0)
}
func PlayerAddMovingLeft(builder *flatbuffers.Builder, movingLeft bool) {
	builder.PrependBoolSlot(4, movingLeft, false)
}
func PlayerAddMovingRight(builder *flatbuffers.Builder, movingRight bool) {
	builder.PrependBoolSlot(5, movingRight, false)
}
func PlayerAddMovingUp(builder *flatbuffers.Builder, movingUp bool) {
	builder.PrependBoolSlot(6, movingUp, false)
}
func PlayerAddMovingDown(builder *flatbuffers.Builder, movingDown bool) {
	builder.PrependBoolSlot(7, movingDown, false)
}
func PlayerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
